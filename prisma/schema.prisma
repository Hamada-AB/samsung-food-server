// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  fristName    String?
  lastName     String?
  country      String?
  gender       String?
  avatar       String?
  token        String?
  recipes      Recipe[]
  comments     Comment[]
  savedRecipes SavedRecipe[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Recipe {
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  ingredients  String
  image        String?
  instructions String
  category     String?
  prepTime     Int?
  cookTime     Int?
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  comments     Comment[]
  savedBy      SavedRecipe[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model SavedRecipe {
  id        Int      @id @default(autoincrement())
  userId    Int
  recipeId  Int
  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, recipeId]) // Ensure that a user can save a specific recipe only once
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  recipeId  Int
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
